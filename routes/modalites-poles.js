const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token d\'acc√®s requis' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Token invalide' });
    }
    req.user = user;
    next();
  });
};
const { query } = require('../config/database');

// GET /api/modalites-poles - R√©cup√©rer toutes les modalit√©s des p√¥les
router.get('/', authenticateToken, async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration des modalit√©s des p√¥les...');
    
    // R√©cup√©rer toutes les modalit√©s des p√¥les
    const result = await query(`
      SELECT 
        mp.id,
        mp.pole,
        mp.modalite,
        mp.commentaire,
        mp.date_modification,
        mp.created_at,
        COUNT(o.id) as nombre_offres_associees
      FROM modalites_poles mp
      LEFT JOIN offres o ON mp.pole = o.pole_lead OR (o.pole_associes IS NOT NULL AND mp.pole = ANY(string_to_array(o.pole_associes, ', ')))
      GROUP BY mp.id, mp.pole, mp.modalite, mp.commentaire, mp.date_modification, mp.created_at
      ORDER BY mp.pole, mp.modalite
    `);
    
    if (result.rows.length === 0) {
      console.log('‚ÑπÔ∏è Aucune modalit√© de p√¥le trouv√©e');
      return res.json([]);
    }
    
    console.log(`‚úÖ ${result.rows.length} modalit√©s de p√¥les r√©cup√©r√©es`);
    res.json(result.rows);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des modalit√©s des p√¥les:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des modalit√©s des p√¥les',
      details: error.message 
    });
  }
});

// GET /api/modalites-poles/pole/:poleName - R√©cup√©rer les modalit√©s d'un p√¥le sp√©cifique
router.get('/pole/:poleName', authenticateToken, async (req, res) => {
  try {
    const { poleName } = req.params;
    console.log(`üìä R√©cup√©ration des modalit√©s pour le p√¥le: ${poleName}`);
    
    const result = await query(`
      SELECT 
        mp.id,
        mp.pole,
        mp.modalite,
        mp.commentaire,
        mp.date_modification,
        mp.created_at,
        COUNT(o.id) as nombre_offres_associees
      FROM modalites_poles mp
      LEFT JOIN offres o ON mp.pole = o.pole_lead OR (o.pole_associes IS NOT NULL AND mp.pole = ANY(string_to_array(o.pole_associes, ', ')))
      WHERE mp.pole = $1
      GROUP BY mp.id, mp.pole, mp.modalite, mp.commentaire, mp.date_modification, mp.created_at
      ORDER BY mp.modalite
    `, [poleName]);
    
    if (result.rows.length === 0) {
      console.log(`‚ÑπÔ∏è Aucune modalit√© trouv√©e pour le p√¥le ${poleName}`);
      return res.json([]);
    }
    
    console.log(`‚úÖ ${result.rows.length} modalit√©s trouv√©es pour le p√¥le ${poleName}`);
    res.json(result.rows);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des modalit√©s par p√¥le:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des modalit√©s par p√¥le',
      details: error.message 
    });
  }
});

// GET /api/modalites-poles/statistiques - R√©cup√©rer les statistiques des modalit√©s
router.get('/statistiques', authenticateToken, async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration des statistiques des modalit√©s des p√¥les...');
    
    const result = await query(`
      SELECT 
        mp.pole,
        COUNT(mp.id) as nombre_modalites,
        COUNT(DISTINCT o.id) as nombre_offres_associees,
        AVG(CAST(o.montant AS DECIMAL)) as montant_moyen_offres,
        STRING_AGG(DISTINCT mp.modalite, ', ') as modalites_disponibles
      FROM modalites_poles mp
      LEFT JOIN offres o ON mp.pole = o.pole_lead OR (o.pole_associes IS NOT NULL AND mp.pole = ANY(string_to_array(o.pole_associes, ', ')))
      GROUP BY mp.pole
      ORDER BY nombre_offres_associees DESC
    `);
    
    const statistiques = {
      total_poles: result.rows.length,
      poles: result.rows.map(row => ({
        pole_nom: row.pole,
        nombre_modalites: parseInt(row.nombre_modalites) || 0,
        nombre_offres_associees: parseInt(row.nombre_offres_associees) || 0,
        montant_moyen_offres: parseFloat(row.montant_moyen_offres) || 0,
        modalites_disponibles: row.modalites_disponibles || ''
      }))
    };
    
    console.log('‚úÖ Statistiques des modalit√©s des p√¥les r√©cup√©r√©es');
    res.json(statistiques);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des statistiques',
      details: error.message 
    });
  }
});

// POST /api/modalites-poles - Cr√©er une nouvelle modalit√© de p√¥le
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { 
      pole, 
      modalite, 
      commentaire 
    } = req.body;
    
    if (!pole || !modalite) {
      return res.status(400).json({ 
        error: 'pole et modalite sont requis' 
      });
    }
    
    console.log(`üìù Cr√©ation d'une modalit√© pour le p√¥le ${pole}`);
    
    // V√©rifier si la modalit√© existe d√©j√† pour ce p√¥le
    const existingModalite = await query(
      'SELECT id FROM modalites_poles WHERE pole = $1 AND modalite = $2', 
      [pole, modalite]
    );
    
    if (existingModalite.rows.length > 0) {
      return res.status(409).json({ 
        error: 'Cette modalit√© existe d√©j√† pour ce p√¥le' 
      });
    }
    
    // Cr√©er la nouvelle modalit√©
    const result = await query(`
      INSERT INTO modalites_poles (pole, modalite, commentaire)
      VALUES ($1, $2, $3)
      RETURNING *
    `, [pole, modalite, commentaire]);
    
    console.log('‚úÖ Nouvelle modalit√© de p√¥le cr√©√©e');
    res.status(201).json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la modalit√©:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la cr√©ation de la modalit√©',
      details: error.message 
    });
  }
});

// PUT /api/modalites-poles/:id - Mettre √† jour une modalit√© de p√¥le
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { 
      pole, 
      modalite, 
      commentaire 
    } = req.body;
    
    console.log(`üìù Mise √† jour de la modalit√© ${id}`);
    
    const result = await query(`
      UPDATE modalites_poles 
      SET pole = $1, modalite = $2, commentaire = $3, date_modification = CURRENT_TIMESTAMP
      WHERE id = $4
      RETURNING *
    `, [pole, modalite, commentaire, id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Modalit√© non trouv√©e' });
    }
    
    console.log('‚úÖ Modalit√© mise √† jour');
    res.json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la modalit√©:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la mise √† jour de la modalit√©',
      details: error.message 
    });
  }
});

// DELETE /api/modalites-poles/:id - Supprimer une modalit√© de p√¥le
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`üóëÔ∏è Suppression de la modalit√© ${id}`);
    
    const result = await query(
      'DELETE FROM modalites_poles WHERE id = $1 RETURNING *', 
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Modalit√© non trouv√©e' });
    }
    
    console.log('‚úÖ Modalit√© supprim√©e');
    res.json({ message: 'Modalit√© supprim√©e avec succ√®s' });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la modalit√©:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la suppression de la modalit√©',
      details: error.message 
    });
  }
});

module.exports = router;
