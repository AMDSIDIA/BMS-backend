const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token d\'acc√®s requis' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: 'Token invalide' });
    }
    req.user = user;
    next();
  });
};
const { query } = require('../config/database');

// GET /api/repartition - R√©cup√©rer toutes les r√©partitions
router.get('/', authenticateToken, async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration des donn√©es de r√©partition...');
    
    // R√©cup√©rer toutes les offres avec leurs r√©partitions
    const result = await query(`
      SELECT 
        o.id,
        o.intitule_offre,
        o.bailleur,
        o.pole_lead,
        o.pole_associes,
        o.statut,
        o.priorite,
        o.date_depot,
        o.montant,
        o.type_offre,
        o.commentaire,
        r.date_repartition,
        r.created_at as date_repartition_created
      FROM offres o
      LEFT JOIN repartitions r ON o.id = r.offre_id
      ORDER BY o.date_depot DESC
    `);
    
    if (result.rows.length === 0) {
      console.log('‚ÑπÔ∏è Aucune offre trouv√©e pour la r√©partition');
      return res.json([]);
    }
    
    console.log(`‚úÖ ${result.rows.length} offres r√©cup√©r√©es pour la r√©partition`);
    res.json(result.rows);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©partitions:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des r√©partitions',
      details: error.message 
    });
  }
});

// GET /api/repartition/pole/:poleName - R√©cup√©rer les r√©partitions par p√¥le
router.get('/pole/:poleName', authenticateToken, async (req, res) => {
  try {
    const { poleName } = req.params;
    console.log(`üìä R√©cup√©ration des r√©partitions pour le p√¥le: ${poleName}`);
    
    const result = await query(`
      SELECT 
        o.id,
        o.intitule_offre,
        o.bailleur,
        o.pole_lead,
        o.pole_associes,
        o.statut,
        o.priorite,
        o.date_depot,
        o.montant,
        o.type_offre,
        o.commentaire,
        r.date_repartition,
        r.created_at as date_repartition_created
      FROM offres o
      LEFT JOIN repartitions r ON o.id = r.offre_id
      WHERE o.pole_lead = $1 OR o.pole_associes LIKE $2
      ORDER BY o.date_depot DESC
    `, [poleName, `%${poleName}%`]);
    
    console.log(`‚úÖ ${result.rows.length} offres trouv√©es pour le p√¥le ${poleName}`);
    res.json(result.rows);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©partitions par p√¥le:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la r√©cup√©ration des r√©partitions par p√¥le',
      details: error.message 
    });
  }
});

// POST /api/repartition - Cr√©er une nouvelle r√©partition
router.post('/', authenticateToken, async (req, res) => {
  try {
    const { offre_id, pole_lead, pole_associes } = req.body;
    
    if (!offre_id || !pole_lead) {
      return res.status(400).json({ 
        error: 'offre_id et pole_lead sont requis' 
      });
    }
    
    console.log(`üìù Cr√©ation d'une r√©partition pour l'offre ${offre_id}`);
    
    // V√©rifier si l'offre existe
    const offreCheck = await query('SELECT id FROM offres WHERE id = $1', [offre_id]);
    if (offreCheck.rows.length === 0) {
      return res.status(404).json({ error: 'Offre non trouv√©e' });
    }
    
    // V√©rifier si une r√©partition existe d√©j√†
    const existingRepartition = await query(
      'SELECT id FROM repartitions WHERE offre_id = $1', 
      [offre_id]
    );
    
    let result;
    if (existingRepartition.rows.length > 0) {
      // Mettre √† jour la r√©partition existante
      result = await query(`
        UPDATE repartitions 
        SET pole_lead = $1, pole_associes = $2, date_repartition = CURRENT_DATE
        WHERE offre_id = $3
        RETURNING *
      `, [pole_lead, pole_associes, offre_id]);
      
      console.log('‚úÖ R√©partition mise √† jour');
    } else {
      // Cr√©er une nouvelle r√©partition
      result = await query(`
        INSERT INTO repartitions (offre_id, pole_lead, pole_associes)
        VALUES ($1, $2, $3)
        RETURNING *
      `, [offre_id, pole_lead, pole_associes]);
      
      console.log('‚úÖ Nouvelle r√©partition cr√©√©e');
    }
    
    res.status(201).json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la r√©partition:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la cr√©ation de la r√©partition',
      details: error.message 
    });
  }
});

// PUT /api/repartition/:id - Mettre √† jour une r√©partition
router.put('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { pole_lead, pole_associes } = req.body;
    
    console.log(`üìù Mise √† jour de la r√©partition ${id}`);
    
    const result = await query(`
      UPDATE repartitions 
      SET pole_lead = $1, pole_associes = $2, date_repartition = CURRENT_DATE
      WHERE id = $3
      RETURNING *
    `, [pole_lead, pole_associes, id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'R√©partition non trouv√©e' });
    }
    
    console.log('‚úÖ R√©partition mise √† jour');
    res.json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la r√©partition:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la mise √† jour de la r√©partition',
      details: error.message 
    });
  }
});

// DELETE /api/repartition/:id - Supprimer une r√©partition
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`üóëÔ∏è Suppression de la r√©partition ${id}`);
    
    const result = await query(
      'DELETE FROM repartitions WHERE id = $1 RETURNING *', 
      [id]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'R√©partition non trouv√©e' });
    }
    
    console.log('‚úÖ R√©partition supprim√©e');
    res.json({ message: 'R√©partition supprim√©e avec succ√®s' });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la r√©partition:', error);
    res.status(500).json({ 
      error: 'Erreur lors de la suppression de la r√©partition',
      details: error.message 
    });
  }
});

module.exports = router;
