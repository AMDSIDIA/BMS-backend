#!/usr/bin/env node

/**
 * Script de test pour l'authentification avec la base de donn√©es
 */

const { query, closeConnection } = require('./config/database');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function testAuth() {
  try {
    console.log('üß™ Test de l\'authentification avec la base de donn√©es');
    console.log('=' .repeat(60));
    
    // Test 1: V√©rifier la connexion √† la base de donn√©es
    console.log('\nüì° Test 1: Connexion √† la base de donn√©es');
    const result = await query('SELECT NOW() as time');
    console.log('‚úÖ Connexion r√©ussie:', result.rows[0].time);
    
    // Test 2: V√©rifier les utilisateurs existants
    console.log('\nüë§ Test 2: Utilisateurs existants');
    const users = await query('SELECT id, email, nom, prenom, role FROM users');
    console.log(`üìä Nombre d'utilisateurs: ${users.rows.length}`);
    users.rows.forEach(user => {
      console.log(`   - ${user.email} (${user.nom} ${user.prenom}) - ${user.role}`);
    });
    
    // Test 3: Test de connexion avec l'utilisateur de test
    console.log('\nüîê Test 3: Test de connexion');
    const testEmail = 'test@bms.com';
    const testPassword = 'test123';
    
    // R√©cup√©rer l'utilisateur
    const userResult = await query('SELECT * FROM users WHERE email = $1', [testEmail]);
    if (userResult.rows.length === 0) {
      console.log('‚ùå Utilisateur de test non trouv√©');
      return;
    }
    
    const user = userResult.rows[0];
    console.log(`‚úÖ Utilisateur trouv√©: ${user.email}`);
    
    // V√©rifier le mot de passe
    const isValidPassword = await bcrypt.compare(testPassword, user.password_hash);
    if (isValidPassword) {
      console.log('‚úÖ Mot de passe correct');
      
      // G√©n√©rer un token JWT
      const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        process.env.JWT_SECRET || 'your-secret-key',
        { expiresIn: '24h' }
      );
      
      console.log('‚úÖ Token JWT g√©n√©r√©');
      console.log(`   Token: ${token.substring(0, 50)}...`);
      
      // V√©rifier le token
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
        console.log('‚úÖ Token JWT valide');
        console.log(`   User ID: ${decoded.userId}`);
        console.log(`   Email: ${decoded.email}`);
        console.log(`   Role: ${decoded.role}`);
      } catch (error) {
        console.log('‚ùå Token JWT invalide:', error.message);
      }
      
    } else {
      console.log('‚ùå Mot de passe incorrect');
    }
    
    // Test 4: Test de cr√©ation d'un nouvel utilisateur
    console.log('\nüë§ Test 4: Cr√©ation d\'un nouvel utilisateur');
    const newUser = {
      email: 'test2@bms.com',
      password: 'test456',
      nom: 'Test2',
      prenom: 'Utilisateur2',
      role: 'user'
    };
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await query('SELECT * FROM users WHERE email = $1', [newUser.email]);
    if (existingUser.rows.length > 0) {
      console.log('‚úÖ Utilisateur test2 existe d√©j√†');
    } else {
      // Cr√©er l'utilisateur
      const hashedPassword = await bcrypt.hash(newUser.password, 10);
      const insertResult = await query(
        'INSERT INTO users (email, password_hash, nom, prenom, role) VALUES ($1, $2, $3, $4, $5) RETURNING *',
        [newUser.email, hashedPassword, newUser.nom, newUser.prenom, newUser.role]
      );
      
      console.log('‚úÖ Nouvel utilisateur cr√©√©:', insertResult.rows[0].email);
    }
    
    console.log('\n‚úÖ Tous les tests d\'authentification ont r√©ussi !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await closeConnection();
  }
}

testAuth();
