#!/usr/bin/env node

/**
 * Script de test pour la configuration de la base de donn√©es BMS
 * Usage: node test-database.js
 */

const { testConnection, initDatabase, getDatabaseStats, closeConnection } = require('./config/database');

async function testDatabase() {
  console.log('üß™ Test de la configuration de la base de donn√©es BMS');
  console.log('=' .repeat(60));
  
  try {
    // Test 1: Connexion √† la base de donn√©es
    console.log('\nüì° Test 1: Connexion √† la base de donn√©es');
    const connectionTest = await testConnection();
    
    if (!connectionTest) {
      console.error('‚ùå √âchec du test de connexion');
      process.exit(1);
    }
    
    // Test 2: Initialisation des tables
    console.log('\nüèóÔ∏è  Test 2: Initialisation des tables');
    await initDatabase();
    
    // Test 3: Statistiques de la base de donn√©es
    console.log('\nüìä Test 3: Statistiques de la base de donn√©es');
    const stats = await getDatabaseStats();
    
    if (stats) {
      console.log('üìà Statistiques actuelles:');
      console.log(`   üë• Utilisateurs: ${stats.users}`);
      console.log(`   üìã Offres: ${stats.offres}`);
      console.log(`   üîÑ R√©partitions: ${stats.repartitions}`);
      console.log(`   üîî Alertes non lues: ${stats.alertesNonLues}`);
    }
    
    // Test 4: Test des requ√™tes de base
    console.log('\nüîç Test 4: Requ√™tes de base');
    const { query } = require('./config/database');
    
    // Test de s√©lection
    const testSelect = await query('SELECT 1 as test_value');
    console.log(`   ‚úÖ SELECT test: ${testSelect.rows[0].test_value}`);
    
    // Test de la table des param√®tres d'alertes
    const alertesParams = await query('SELECT * FROM parametres_alertes WHERE id = 1');
    if (alertesParams.rows.length > 0) {
      console.log('   ‚úÖ Param√®tres d\'alertes configur√©s');
      console.log(`      D√©lai montage administratif: ${alertesParams.rows[0].delai_montage_administratif}h`);
      console.log(`      D√©lai d√©p√¥t: ${alertesParams.rows[0].delai_depot}h`);
    }
    
    console.log('\n‚úÖ Tous les tests de base de donn√©es ont r√©ussi !');
    console.log('\nüéâ Configuration de la base de donn√©es BMS pr√™te !');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests de base de donn√©es:');
    console.error('   Message:', error.message);
    console.error('   Code:', error.code);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('\nüí° Solutions possibles:');
      console.error('   1. V√©rifiez que PostgreSQL est d√©marr√©');
      console.error('   2. V√©rifiez les param√®tres de connexion dans .env');
      console.error('   3. Cr√©ez la base de donn√©es et l\'utilisateur');
    } else if (error.code === '28P01') {
      console.error('\nüí° Solutions possibles:');
      console.error('   1. V√©rifiez le nom d\'utilisateur et mot de passe');
      console.error('   2. Cr√©ez l\'utilisateur bms_user avec le bon mot de passe');
    } else if (error.code === '3D000') {
      console.error('\nüí° Solutions possibles:');
      console.error('   1. Cr√©ez la base de donn√©es bms_db');
      console.error('   2. V√©rifiez le nom de la base de donn√©es dans .env');
    }
    
    process.exit(1);
  } finally {
    // Fermer proprement la connexion
    await closeConnection();
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testDatabase().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = { testDatabase };
